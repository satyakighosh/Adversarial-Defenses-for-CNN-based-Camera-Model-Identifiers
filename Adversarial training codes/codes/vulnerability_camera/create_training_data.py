import numpy as np
import os
import json
import pickle
import cv2
import random
from sklearn.feature_extraction import image
from PIL import Image


DATADIR = "/home/mtech/2020/satyaki_ghosh/datasets/VISION"
CATEGORIES = [
    "D01_Samsung_GalaxyS3Mini",
    "D02_Apple_iPhone4s",
    "D03_Huawei_P9",
    "D04_LG_D290",
    "D05_Apple_iPhone5c"]

phototype = ["images/nat"]
IMG_SIZE = 299 # 32 
patches_per_photo =  100
training_data = []
img_per_model = 150  # taking an upper limit to avoid data imbalance

def create_training_data() :

    # iterating through each camera-model : (for eg. save in ./xceptionnet/data/train/D04_LG_D290, ./xceptionnet/data/test/D04_LG_D290)
    for category in CATEGORIES:
        print(f"Camera-model : {category}")
        class_num = CATEGORIES.index(category)
        for ptype in phototype:
            path = os.path.join(DATADIR,category)
            path = os.path.join(path,ptype)

            # shuffling the images to avoid similar/close images
            photos = os.listdir(path)
            random.shuffle(photos)

            # splitting for train, val and test
            train_split = 0.7
            val_split = 0.15
            test_split = 0.15

            train_num = int(train_split * img_per_model)
            test_num = int(test_split * img_per_model)
            training_images = photos[0 : train_num]
            validation_images = photos[train_num : train_num + test_num]
            testing_images = photos[train_num + test_num : train_num + 2 * test_num]

            # make train_folder : save patches in ./xceptionnet/data/train/model_name
            train_path = f"./xceptionNet/data/train/{category}/"
            if os.path.isdir(train_path) == False:
                os.mkdir(train_path)
            for img in training_images:                
                img_array_test = cv2.imread(os.path.join(path,img))
                patches = image.extract_patches_2d(img_array_test, (IMG_SIZE, IMG_SIZE), max_patches = patches_per_photo)
                for i in range(patches_per_photo) :                    
                    im = Image.fromarray(patches[i])
                    im.save(f"./xceptionNet/data/train/{category}/{img}_{i}.jpeg")


            # make val_folder : save patches in ./xceptionnet/data/val/model_name
            val_path = f"./xceptionNet/data/val/{category}/"
            if os.path.isdir(val_path) == False:
                os.mkdir(val_path)
            for img in validation_images:                
                img_array_test = cv2.imread(os.path.join(path,img))
                patches = image.extract_patches_2d(img_array_test, (IMG_SIZE, IMG_SIZE), max_patches = patches_per_photo)
                for i in range(patches_per_photo) :                    
                    im = Image.fromarray(patches[i])
                    im.save(f"./xceptionNet/data/val/{category}/{img}_{i}.jpeg")
            
            # make test_folder : save patches in ./xceptionnet/data/test/model_name
            test_path = f"./xceptionNet/data/test/{category}/"
            if os.path.isdir(test_path) == False:
                os.mkdir(test_path)
            for img in testing_images:                
                img_array_test = cv2.imread(os.path.join(path,img))
                patches = image.extract_patches_2d(img_array_test, (IMG_SIZE, IMG_SIZE), max_patches = patches_per_photo)
                for i in range(patches_per_photo) :                    
                    im = Image.fromarray(patches[i])
                    im.save(f"./xceptionNet/data/test/{category}/{img}_{i}.jpeg")
       

    # save the dataset
    # dummy = np.asarray(training_data, dtype=object)
    # with open('xceptionNet/training_data.npy','wb') as f:
    #     np.save(f,dummy)

create_training_data()
